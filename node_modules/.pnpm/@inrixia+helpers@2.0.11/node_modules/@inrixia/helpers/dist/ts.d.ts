export type { RangeOf, NumRangeInclusive } from "./ts/numRange.js";
export type { AddOne, MinusOne, TimesTen } from "./ts/math.js";
export declare type ValueOf<T> = T[keyof T];
export declare type ValueOfA<T extends unknown[] | readonly unknown[]> = T[number];
export declare type UnionToIntersection<T> = (T extends any ? (x: T) => any : never) extends (x: infer R) => any ? R : never;
export declare type RecursivePartial<T> = {
    [P in keyof T]?: T[P] extends (infer U)[] ? RecursivePartial<U>[] : T[P] extends object ? RecursivePartial<T[P]> : T[P];
};
export declare type ToStrUnion<T extends string | number | bigint | boolean | null | undefined> = `${T}`;
export declare type FirstChar<T> = T extends `${infer C}${string}` ? C : never;
export declare type LastChar<T> = T extends `${string}${infer C}` ? C : never;
/**
 * Takes in a string padded with 0's and returns the unpadded string;
 */
export declare type UnPad<N extends string> = N extends "0" ? "0" : N extends `0${infer A}` ? UnPad<A> : N;
/**
 * Returns a type guard to validate a passed key is a keyof given record
 */
export declare const generateIsKeyof: <T extends Record<string | number | symbol, unknown>>(record: T) => (key: any) => key is keyof T;
export declare const isDefined: <T>(O: T | undefined) => O is T;
export declare type RequiredKeys<T> = keyof T extends infer K extends PropertyKey ? (K extends K ? (T extends Record<K, unknown> ? K : never) : never) : never;
export declare type OptionalKeys<T> = Exclude<keyof T, RequiredKeys<T>>;
export declare type RequiredOnly<T> = Pick<T, RequiredKeys<T> & keyof T>;
export declare type OptionalOnly<T> = Pick<T, OptionalKeys<T> & keyof T>;
export declare type UnknownRecord = Record<string | number | symbol, unknown>;
export declare type Constructor = abstract new (...args: any) => any;
export declare type Primitives = StringConstructor | NumberConstructor | BooleanConstructor;
export declare type Primitive<T> = T extends string ? string : T extends StringConstructor ? string : T extends number ? number : T extends NumberConstructor ? number : T extends boolean ? boolean : T extends BooleanConstructor ? boolean : T;
//# sourceMappingURL=ts.d.ts.map