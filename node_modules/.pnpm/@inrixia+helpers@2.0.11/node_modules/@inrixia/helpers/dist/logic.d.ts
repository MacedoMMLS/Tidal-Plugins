/// <reference types="node" resolution-mode="require"/>
export declare const sleep: typeof import("timers/promises").setTimeout;
export declare class Promize<T> {
    p: Promise<T>;
    res: (value: T) => void;
    rej: (reason?: any) => void;
    /**
     * Returns a new instance of a `Promize`, a externally resolvable Promise.
     * @param resValue If not undefined, resolves the internal promise with given value on creation.
     */
    constructor(resValue?: T);
    /**
     * Recreate the promise
     * @param resValue If not undefined, resolves the internal promise with given value on creation.
     */
    set(resValue?: T): void;
}
export declare const retry: <T>(func: () => T | Promise<T>, options?: {
    onErr?: ((error: unknown, retryCount: number) => void) | undefined;
    timeoutMultiplier?: number | undefined;
    maxRetries?: number | undefined;
} | undefined) => () => Promise<T>;
//# sourceMappingURL=logic.d.ts.map