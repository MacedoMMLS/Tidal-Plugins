const OK = {
    message: () => "Ok",
    pass: true,
};
export const getExpect = (expect) => {
    const matchers = {
        typeOrNull(received, argument) {
            if (received === null)
                return OK;
            expect(received).toStrictEqual(expect.any(argument));
            return OK;
        },
        typeOrUndefined(received, argument) {
            if (received === undefined)
                return OK;
            expect(received).toStrictEqual(expect.any(argument));
            return OK;
        },
        objectContainingOrEmpty(received, argument) {
            if (Object.keys(received).length === 0)
                return OK;
            expect(received).toStrictEqual(expect.objectContaining(argument));
            return OK;
        },
        objectContainingOrUndefined(received, argument) {
            if (received === undefined)
                return OK;
            expect(received).toStrictEqual(expect.objectContaining(argument));
            return OK;
        },
        objectContainingOrNull(received, argument) {
            if (received === null)
                return OK;
            expect(received).toStrictEqual(expect.objectContaining(argument));
            return OK;
        },
        objectContainingOrEmptyOrNullish(received, argument) {
            if (received === undefined || received === null || Object.keys(received).length === 0)
                return OK;
            expect(received).toStrictEqual(expect.objectContaining(argument));
            return OK;
        },
        keylessObjectContaining(received, argument) {
            for (const key in received) {
                expect(received[key]).toStrictEqual(argument);
            }
            return OK;
        },
        arrayContainingOrEmpty(received, argument) {
            if (received.length === 0)
                return OK;
            expect(received).toStrictEqual(expect.arrayContaining(argument));
            return OK;
        },
        arrayContainingOrEmptyOrUndefined(received, argument) {
            if (received === undefined || received.length === 0)
                return OK;
            expect(received).toStrictEqual(expect.arrayContaining(argument));
            return OK;
        },
        enum(received, argument) {
            expect(argument).toContain(received);
            return OK;
        },
    };
    expect.extend(matchers);
    return expect;
};
//# sourceMappingURL=test.js.map