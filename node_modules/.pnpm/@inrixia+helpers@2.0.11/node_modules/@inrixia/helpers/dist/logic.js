import { promisify } from "util";
export const sleep = promisify(setTimeout);
export class Promize {
    p;
    res;
    rej;
    /**
     * Returns a new instance of a `Promize`, a externally resolvable Promise.
     * @param resValue If not undefined, resolves the internal promise with given value on creation.
     */
    constructor(resValue) {
        this.set(resValue);
    }
    /**
     * Recreate the promise
     * @param resValue If not undefined, resolves the internal promise with given value on creation.
     */
    set(resValue) {
        this.p = new Promise((res, rej) => {
            this.res = res;
            this.rej = rej;
        });
        if (resValue !== undefined)
            this.res(resValue);
    }
}
export const retry = (func, options) => {
    let retryCount = 0;
    const maxRetries = options?.maxRetries ?? 10;
    const timeoutMultiplier = options?.timeoutMultiplier ?? 1000;
    const onErr = options?.onErr;
    const tryAgain = async () => {
        try {
            return await func();
        }
        catch (e) {
            if (onErr !== undefined)
                onErr(e, retryCount);
            if (retryCount < maxRetries) {
                retryCount++;
                if (timeoutMultiplier > 0)
                    await sleep(Math.random() * timeoutMultiplier);
                return tryAgain();
            }
            throw e;
        }
    };
    return tryAgain;
};
//# sourceMappingURL=logic.js.map